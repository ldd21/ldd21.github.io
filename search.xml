<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>瑞吉外卖项目Day01</title>
      <link href="/post/c4768808.html"/>
      <url>/post/c4768808.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>写在最前：此文章为黑马程序员瑞吉外卖项目学习笔记，感谢黑马的教程。附上链接：<a href="https://www.bilibili.com/video/BV13a411q753/?share_source=copy_web&vd_source=76db1981bedb2535b2880cd27e4140fa">点击跳转到视频教程</a></p></blockquote><blockquote><p>学习本项目所需前置知识：<br>Java基础知识 javaweb、MySQL、maven、SSM、springboot、mybatisplus</p></blockquote><h1 id="1-瑞吉外卖项目概述"><a href="#1-瑞吉外卖项目概述" class="headerlink" title="1.瑞吉外卖项目概述"></a>1.瑞吉外卖项目概述</h1><h2 id="1-0项目中所需要的资源，百度网盘链接："><a href="#1-0项目中所需要的资源，百度网盘链接：" class="headerlink" title="1.0项目中所需要的资源，百度网盘链接："></a>1.0项目中所需要的资源，百度网盘链接：</h2><p><a href="https://pan.baidu.com/s/1WKULh5F7BwjjPRpDnhozAA">https://pan.baidu.com/s/1WKULh5F7BwjjPRpDnhozAA</a><br>提取码：ldd1</p><h2 id="1-1项目效果展示"><a href="#1-1项目效果展示" class="headerlink" title="1.1项目效果展示"></a>1.1项目效果展示</h2><p><img src="https://pic.imgdb.cn/item/63b696d8be43e0d30ef6b7c9.png" alt="image"></p><h2 id="1-2软件开发整体流程"><a href="#1-2软件开发整体流程" class="headerlink" title="1.2软件开发整体流程"></a>1.2软件开发整体流程</h2><p><img src="https://pic.imgdb.cn/item/63b69689be43e0d30ef5e6b5.png" alt="image.png"></p><h2 id="1-3整体项目介绍"><a href="#1-3整体项目介绍" class="headerlink" title="1.3整体项目介绍"></a>1.3整体项目介绍</h2><p><img src="https://pic.imgdb.cn/item/63b69698be43e0d30ef60be1.png" alt="image.png"></p><h3 id="1-3-1技术选型："><a href="#1-3-1技术选型：" class="headerlink" title="1.3.1技术选型："></a>1.3.1技术选型：</h3><p><img src="https://pic.imgdb.cn/item/63b6969cbe43e0d30ef614fb.png" alt="image.png"></p><h3 id="1-3-2功能架构"><a href="#1-3-2功能架构" class="headerlink" title="1.3.2功能架构"></a>1.3.2功能架构</h3><p><img src="https://pic.imgdb.cn/item/63b6969dbe43e0d30ef61761.png" alt="image.png"></p><h3 id="1-3-3-角色"><a href="#1-3-3-角色" class="headerlink" title="1.3.3 角色"></a>1.3.3 角色</h3><p><img src="https://pic.imgdb.cn/item/63b6969fbe43e0d30ef619e8.png" alt="image.png"></p><h1 id="2-开发环境搭建"><a href="#2-开发环境搭建" class="headerlink" title="2.开发环境搭建"></a>2.开发环境搭建</h1><h2 id="2-1数据库环境搭建"><a href="#2-1数据库环境搭建" class="headerlink" title="2.1数据库环境搭建"></a>2.1数据库环境搭建</h2><p>创建名为reggie的数据库，并导入sql文件（sql文件在文首百度网盘链接中）<br><img src="https://pic.imgdb.cn/item/63b696a0be43e0d30ef61d04.png" alt="image.png"><br>以下为创建出来的11个表<br><img src="https://pic.imgdb.cn/item/63b696a1be43e0d30ef62039.png" alt="image.png"></p><h2 id="2-2搭建项目工程"><a href="#2-2搭建项目工程" class="headerlink" title="2.2搭建项目工程"></a>2.2搭建项目工程</h2><h3 id="2-2-1-idea创建项目"><a href="#2-2-1-idea创建项目" class="headerlink" title="2.2.1 idea创建项目"></a>2.2.1 idea创建项目</h3><p>我们直接创建一个springboot工程，选择SpringWeb，MySQL，mybatis，接着在pom.xml文件中导入druid,lombok,mybatisplus的依赖坐标。（ps:视频中创建的是Maven工程，比较麻烦，我们直接创建springboot工程。）</p><h3 id="1-2-2导入项目所需的前端资源"><a href="#1-2-2导入项目所需的前端资源" class="headerlink" title="1.2.2导入项目所需的前端资源"></a>1.2.2导入项目所需的前端资源</h3><p>（本项目注重后端开发，前端不需要我们自己写）<br>将分享资源中的前端资源导入到resources&#x2F;static目录下。（如果这里创建的是maven工程，需要配置静态资源映射，代码如下）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置静态资源映射</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始进行静态资源映射...&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/backend/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/backend/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/front/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/front/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-3导入yml配置文件"><a href="#2-2-3导入yml配置文件" class="headerlink" title="2.2.3导入yml配置文件"></a>2.2.3导入yml配置文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 应用的名称，可选</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">reggie_take_out</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/reggie?serverTimezone=Asia</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment">#在映射实体或者属性时，将数据库中表名和字段名中的下划线去掉，按照驼峰命名法映射</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">ASSIGN_ID</span></span><br></pre></td></tr></table></figure><p>注意用户名和密码要配置成自己的</p><h1 id="3-后台登录功能开发"><a href="#3-后台登录功能开发" class="headerlink" title="3.后台登录功能开发"></a>3.后台登录功能开发</h1><h2 id="3-1后台功能开发"><a href="#3-1后台功能开发" class="headerlink" title="3.1后台功能开发"></a>3.1后台功能开发</h2><p><img src="https://pic.imgdb.cn/item/63b696a2be43e0d30ef622bc.png" alt="image.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 员工实体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String idNumber;<span class="comment">//身份证号码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-2创建对应的包结构"><a href="#3-2创建对应的包结构" class="headerlink" title="3.2创建对应的包结构"></a>3.2创建对应的包结构</h2><p><img src="https://pic.imgdb.cn/item/63b696a3be43e0d30ef625e5.png" alt="image.png"><br><img src="https://pic.imgdb.cn/item/63b696a4be43e0d30ef628c7.png" alt="image.png"></p><h2 id="3-3导入结果返回类"><a href="#3-3导入结果返回类" class="headerlink" title="3.3导入结果返回类"></a>3.3导入结果返回类</h2><p>此类是一个通用结果类，服务端响应的所有结果最终都会包装成此种类型返回给前端对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用的返回结果类，服务端相应的数据最终封装成此对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code; <span class="comment">//编码：1成功，0和其它数字为失败</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg; <span class="comment">//错误信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T data; <span class="comment">//数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">//动态数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">success</span><span class="params">(T object)</span> &#123;</span><br><span class="line">        R&lt;T&gt; r = <span class="keyword">new</span> <span class="title class_">R</span>&lt;T&gt;();</span><br><span class="line">        r.data = object;</span><br><span class="line">        r.code = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">error</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.msg = msg;</span><br><span class="line">        r.code = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> R&lt;T&gt; <span class="title function_">add</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-4梳理登录方法处理逻辑"><a href="#3-4梳理登录方法处理逻辑" class="headerlink" title="3.4梳理登录方法处理逻辑"></a>3.4梳理登录方法处理逻辑</h2><p><img src="https://pic.imgdb.cn/item/63b696a6be43e0d30ef62d89.png" alt="image.png"></p><h2 id="3-5代码实现登录功能"><a href="#3-5代码实现登录功能" class="headerlink" title="3.5代码实现登录功能"></a>3.5代码实现登录功能</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/employee&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeService employeeService;<span class="comment">//自动装配</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 员工登录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> employee</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Employee&gt; <span class="title function_">login</span><span class="params">(HttpServletRequest request,<span class="meta">@RequestBody</span> Employee employee)</span>&#123;</span><br><span class="line">        <span class="comment">//1将页面提交的密码进行md5加密处理</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> employee.getPassword();</span><br><span class="line">        password = DigestUtils.md5DigestAsHex(password.getBytes());</span><br><span class="line">        <span class="comment">//2根据页面提交的用户名username查询数据库</span></span><br><span class="line">        LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(Employee::getUsername,employee.getUsername());</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> employeeService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3如果没有查询到则返回登录失败结果</span></span><br><span class="line">        <span class="keyword">if</span>(emp == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;登陆失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4密码对比，如果不一致则返回登录失败结果</span></span><br><span class="line">        <span class="keyword">if</span>(!emp.getPassword().equals(password))&#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;登陆失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5查看员工状态，如果禁用，返回员工禁用结果</span></span><br><span class="line">        <span class="keyword">if</span>(emp.getStatus()==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;账号已禁用&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6登录成功</span></span><br><span class="line">        request.getSession().setAttribute(<span class="string">&quot;employee&quot;</span>,emp.getId());</span><br><span class="line">        <span class="keyword">return</span> R.success(emp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-6后台系统退出功能"><a href="#3-6后台系统退出功能" class="headerlink" title="3.6后台系统退出功能"></a>3.6后台系统退出功能</h2><p><img src="https://pic.imgdb.cn/item/63b696a7be43e0d30ef62fd5.png" alt="image.png"><br><img src="https://pic.imgdb.cn/item/63b696adbe43e0d30ef63f22.png" alt="image.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 员工退出</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/logout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">logout</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">        request.getSession().removeAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;退出成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需把以上代码加到login方法后面</p><blockquote><p>以上，为瑞吉外卖业务开发day01学习笔记。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> java开发 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 总结 </tag>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯Java B组真题</title>
      <link href="/post/1e2a5f4e.html"/>
      <url>/post/1e2a5f4e.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目来源于官方的真题，有时间再整理题解答案…</p></blockquote><h1 id="蓝桥杯Java-B组蓝桥杯真题"><a href="#蓝桥杯Java-B组蓝桥杯真题" class="headerlink" title="蓝桥杯Java B组蓝桥杯真题"></a>蓝桥杯Java B组蓝桥杯真题</h1><h2 id="试题-A-星期计算"><a href="#试题-A-星期计算" class="headerlink" title="试题 A: 星期计算"></a>试题 A: 星期计算</h2><h3 id="【问题描述】"><a href="#【问题描述】" class="headerlink" title="【问题描述】"></a>【问题描述】</h3><ul><li>已知今天是星期六，请问 2022 天后是星期几？注意用数字 1 到 7 表示星期一到星期日。</li></ul><h3 id="【答案提交】"><a href="#【答案提交】" class="headerlink" title="【答案提交】"></a>【答案提交】</h3><ul><li>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</li></ul><h2 id="试题-B-山"><a href="#试题-B-山" class="headerlink" title="试题 B: 山"></a>试题 B: 山</h2><h3 id="【问题描述】-1"><a href="#【问题描述】-1" class="headerlink" title="【问题描述】"></a>【问题描述】</h3><ul><li>这天小明正在学数数。<br>他突然发现有些正整数的形状像一座“山”，比如 123565321、145541，它们左右对称（回文）且数位上的数字先单调不减，后单调不增。小明数了很久也没有数完，他想让你告诉他在区间 [2022, 2022222022] 中有多少个数的形状像一座“山”。</li></ul><h3 id="【答案提交】-1"><a href="#【答案提交】-1" class="headerlink" title="【答案提交】"></a>【答案提交】</h3><ul><li>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</li></ul><h2 id="试题-C-字符统计"><a href="#试题-C-字符统计" class="headerlink" title="试题 C: 字符统计"></a>试题 C: 字符统计</h2><h3 id="【问题描述】-2"><a href="#【问题描述】-2" class="headerlink" title="【问题描述】"></a>【问题描述】</h3><ul><li>给定一个只包含大写字母的字符串 S，请你输出其中出现次数最多的字母。如果有多个字母均出现了最多次，按字母表顺序依次输出所有这些字母。</li></ul><h3 id="【输入格式】"><a href="#【输入格式】" class="headerlink" title="【输入格式】"></a>【输入格式】</h3><ul><li>一个只包含大写字母的字符串 S .</li></ul><h3 id="【输出格式】"><a href="#【输出格式】" class="headerlink" title="【输出格式】"></a>【输出格式】</h3><ul><li>若干个大写字母，代表答案。</li></ul><h3 id="【样例输入】"><a href="#【样例输入】" class="headerlink" title="【样例输入】"></a>【样例输入】</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BABBACAC</span><br></pre></td></tr></table></figure><h3 id="【样例输出】"><a href="#【样例输出】" class="headerlink" title="【样例输出】"></a>【样例输出】</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AB</span><br></pre></td></tr></table></figure><h3 id="【评测用例规模与约定】"><a href="#【评测用例规模与约定】" class="headerlink" title="【评测用例规模与约定】"></a>【评测用例规模与约定】</h3><ul><li>对于 100% 的评测用例，1 ≤ |S | ≤ 106</li></ul><h2 id="试题-D-最少刷题数"><a href="#试题-D-最少刷题数" class="headerlink" title="试题 D: 最少刷题数"></a>试题 D: 最少刷题数</h2><h3 id="【问题描述】-3"><a href="#【问题描述】-3" class="headerlink" title="【问题描述】"></a>【问题描述】</h3><ul><li>小蓝老师教的编程课有 N 名学生，编号依次是 1 . . . N。第 i 号学生这学期<br>刷题的数量是 Ai。对于每一名学生，请你计算他至少还要再刷多少道题，才能使得全班刷题比他多的学生数不超过刷题比他少的学生数。</li></ul><h3 id="【输入格式】-1"><a href="#【输入格式】-1" class="headerlink" title="【输入格式】"></a>【输入格式】</h3><ul><li>第一行包含一个正整数 N。</li><li>第二行包含 N 个整数：A1, A2, A3, . . . , AN.</li></ul><h3 id="【输出格式】-1"><a href="#【输出格式】-1" class="headerlink" title="【输出格式】"></a>【输出格式】</h3><ul><li>输出 N 个整数，依次表示第 1 . . . N 号学生分别至少还要再刷多少道题。</li></ul><h3 id="【样例输入】-1"><a href="#【样例输入】-1" class="headerlink" title="【样例输入】"></a>【样例输入】</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 5</span><br><span class="line">12 10 15 20 6</span><br></pre></td></tr></table></figure><h3 id="【样例输出】-1"><a href="#【样例输出】-1" class="headerlink" title="【样例输出】"></a>【样例输出】</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 3 0 0 7</span><br></pre></td></tr></table></figure><h3 id="【评测用例规模与约定】-1"><a href="#【评测用例规模与约定】-1" class="headerlink" title="【评测用例规模与约定】"></a>【评测用例规模与约定】</h3><ul><li>对于 30% 的数据，1 ≤ N ≤ 1000, 0 ≤ Ai ≤ 1000.</li><li>对于 100% 的数据，1 ≤ N ≤ 100000, 0 ≤ Ai ≤ 100000</li></ul><h2 id="试题-E-求阶乘"><a href="#试题-E-求阶乘" class="headerlink" title="试题 E: 求阶乘"></a>试题 E: 求阶乘</h2><h3 id="【问题描述】-4"><a href="#【问题描述】-4" class="headerlink" title="【问题描述】"></a>【问题描述】</h3><ul><li>满足 N! 的末尾恰好有 K 个 0 的最小的 N 是多少?</li><li>如果这样的 N 不存在输出 −1。</li></ul><h3 id="【输入格式】-2"><a href="#【输入格式】-2" class="headerlink" title="【输入格式】"></a>【输入格式】</h3><ul><li>一个整数 K。</li></ul><h3 id="【输出格式】-2"><a href="#【输出格式】-2" class="headerlink" title="【输出格式】"></a>【输出格式】</h3><ul><li>一个整数代表答案。</li></ul><h3 id="【样例输入】-2"><a href="#【样例输入】-2" class="headerlink" title="【样例输入】"></a>【样例输入】</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="【样例输出】-2"><a href="#【样例输出】-2" class="headerlink" title="【样例输出】"></a>【样例输出】</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><h3 id="【评测用例规模与约定】-2"><a href="#【评测用例规模与约定】-2" class="headerlink" title="【评测用例规模与约定】"></a>【评测用例规模与约定】</h3><ul><li>对于 30% 的数据，1 ≤ K ≤ 106</li><li>对于 100% 的数据，1 ≤ K ≤ 1018</li></ul><h2 id="试题-F-最大子矩阵"><a href="#试题-F-最大子矩阵" class="headerlink" title="试题 F: 最大子矩阵"></a>试题 F: 最大子矩阵</h2><h3 id="【问题描述】-5"><a href="#【问题描述】-5" class="headerlink" title="【问题描述】"></a>【问题描述】</h3><ul><li>小明有一个大小为 N × M 的矩阵，可以理解为一个 N 行 M 列的二维数组。我们定义一个矩阵 m 的稳定度 f(m) 为 f(m) &#x3D; max(m) − min(m)，其中 max(m)表示矩阵 m 中的最大值，min(m) 表示矩阵 m 中的最小值。现在小明想要从这个矩阵中找到一个稳定度不大于 limit 的子矩阵，同时他还希望这个子矩阵的面积越大越好（面积可以理解为矩阵中元素个数）。子矩阵定义如下：从原矩阵中选择一组连续的行和一组连续的列，这些行列交点上的元素组成的矩阵即为一个子矩阵。</li></ul><h3 id="【输入格式】-3"><a href="#【输入格式】-3" class="headerlink" title="【输入格式】"></a>【输入格式】</h3><ul><li>第一行输入两个整数 N，M，表示矩阵的大小。</li><li>接下来 N 行，每行输入 M 个整数，表示这个矩阵。</li><li>最后一行输入一个整数 limit，表示限制。</li></ul><h3 id="【输出格式】-3"><a href="#【输出格式】-3" class="headerlink" title="【输出格式】"></a>【输出格式】</h3><ul><li>输出一个整数，分别表示小明选择的子矩阵的最大面积。</li></ul><h3 id="【样例输入】-3"><a href="#【样例输入】-3" class="headerlink" title="【样例输入】"></a>【样例输入】</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3 4</span><br><span class="line">2 0 7 9</span><br><span class="line">0 6 9 7</span><br><span class="line">8 4 6 4</span><br><span class="line">8</span><br></pre></td></tr></table></figure><h3 id="【样例输出】-3"><a href="#【样例输出】-3" class="headerlink" title="【样例输出】"></a>【样例输出】</h3><p>6</p><h3 id="【样例说明】"><a href="#【样例说明】" class="headerlink" title="【样例说明】"></a>【样例说明】</h3><ul><li>满足稳定度不大于 8 的且面积最大的子矩阵总共有三个，他们的面积都是6（粗体表示子矩阵元素）：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">2 0 7 9</span><br><span class="line">0 6 9 7</span><br><span class="line">8 4 6 4</span><br><span class="line"></span><br><span class="line">2 0 7 9</span><br><span class="line">0 6 9 7</span><br><span class="line">8 4 6 4</span><br><span class="line"></span><br><span class="line">2 0 7 9</span><br><span class="line">0 6 9 7</span><br><span class="line">8 4 6 4</span><br></pre></td></tr></table></figure></li></ul><h2 id="试题-G-数组切分"><a href="#试题-G-数组切分" class="headerlink" title="试题 G: 数组切分"></a>试题 G: 数组切分</h2><h3 id="【问题描述】-6"><a href="#【问题描述】-6" class="headerlink" title="【问题描述】"></a>【问题描述】</h3><ul><li>已知一个长度为 N 的数组：A1, A2, A3, …AN 恰好是 1 ∼ N 的一个排列。现在要求你将 A 数组切分成若干个 (最少一个，最多 N 个) 连续的子数组，并且每个子数组中包含的整数恰好可以组成一段连续的自然数。</li><li>例如对于 A &#x3D; {1, 3, 2, 4}, 一共有 5 种切分方法：</li><li>{1}{3}{2}{4}：每个单独的数显然是 (长度为 1 的) 一段连续的自然数。</li><li>{1}{3, 2}{4}：{3, 2} 包含 2 到 3，是 一段连续的自然数，另外 {1} 和 {4} 显然<br>也是。</li><li>{1}{3, 2, 4}：{3, 2, 4} 包含 2 到 4，是 一段连续的自然数，另外 {1} 显然也是。</li><li>{1, 3, 2}{4}：{1, 3, 2} 包含 1 到 3，是 一段连续的自然数，另外 {4} 显然也是。</li><li>{1, 3, 2, 4}：只有一个子数组，包含 1 到 4，是 一段连续的自然数。</li></ul><h3 id="【输入格式】-4"><a href="#【输入格式】-4" class="headerlink" title="【输入格式】"></a>【输入格式】</h3><ul><li>第一行包含一个整数 N。第二行包含 N 个整数，代表 A 数组。</li></ul><h3 id="【输出格式】-4"><a href="#【输出格式】-4" class="headerlink" title="【输出格式】"></a>【输出格式】</h3><p>输出一个整数表示答案。由于答案可能很大，所以输出其对 1000000007 取模后的值</p><h3 id="【样例输入】-4"><a href="#【样例输入】-4" class="headerlink" title="【样例输入】"></a>【样例输入】</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1 3 2 4</span><br></pre></td></tr></table></figure><h3 id="【样例输出】-4"><a href="#【样例输出】-4" class="headerlink" title="【样例输出】"></a>【样例输出】</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h2 id="试题-H-回忆迷宫"><a href="#试题-H-回忆迷宫" class="headerlink" title="试题 H: 回忆迷宫"></a>试题 H: 回忆迷宫</h2><h3 id="【问题描述】-7"><a href="#【问题描述】-7" class="headerlink" title="【问题描述】"></a>【问题描述】</h3><ul><li>爱丽丝刚从一处地下迷宫中探险归来，你能根据她对于自己行动路径的回忆，帮她画出迷宫地图吗？迷宫地图是基于二维网格的。爱丽丝会告诉你一系列她在迷宫中的移动步骤，每个移动步骤可能是上下左右四个方向中的一种，表示爱丽丝往这个方向走了一格。你需要根据这些移动步骤给出一个迷宫地图，并满足以下条件：</li><li>1、爱丽丝能在迷宫内的某个空地开始，顺利的走完她回忆的所有移动步<br>骤。</li><li>2、迷宫内不存在爱丽丝没有走过的空地。</li><li>3、迷宫是封闭的，即可通过墙分隔迷宫内与迷宫外。任意方向的无穷远处<br>视为迷宫外，所有不与迷宫外联通的空地都视为是迷宫内。（迷宫地图为四联<br>通，即只有上下左右视为联通）</li><li>4、在满足前面三点的前提下，迷宫的墙的数量要尽可能少。</li></ul><h3 id="【输入格式】-5"><a href="#【输入格式】-5" class="headerlink" title="【输入格式】"></a>【输入格式】</h3><ul><li>第一行一个正整数 N，表示爱丽丝回忆的步骤数量。</li><li>接下来一行 N 个英文字符，仅包含 UDLR 四种字符，分别表示上（Up）、</li><li>下（Down）、左（Left）、右（Right）。</li></ul><h3 id="【输出格式】-5"><a href="#【输出格式】-5" class="headerlink" title="【输出格式】"></a>【输出格式】</h3><ul><li>请通过字符画的形式输出迷宫地图。迷宫地图可能包含许多行，用字符 ‘*’表示墙，用 ‘ ’（空格）表示非墙。你的输出需要保证以下条件：</li><li>1、至少有一行第一个字符为 ‘*’。</li><li>2、第一行至少有一个字符为 ‘*’。</li><li>3、每一行的最后一个字符为 ‘*’。</li><li>4、最后一行至少有一个字符为 ‘*’。</li></ul><h3 id="【样例输入】-5"><a href="#【样例输入】-5" class="headerlink" title="【样例输入】"></a>【样例输入】</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">17</span><br><span class="line">UUUULLLLDDDDRRRRU</span><br></pre></td></tr></table></figure><h3 id="【样例输出】-5"><a href="#【样例输出】-5" class="headerlink" title="【样例输出】"></a>【样例输出】</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*****</span><br><span class="line">* *</span><br><span class="line">* *** *</span><br><span class="line">* *** *</span><br><span class="line">* *** *</span><br><span class="line">* *</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><h3 id="【样例说明】-1"><a href="#【样例说明】-1" class="headerlink" title="【样例说明】"></a>【样例说明】</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">      爱丽丝可以把第六行第六个字符作为起点。</span><br><span class="line">外墙墙墙墙墙外</span><br><span class="line">墙内内内内内墙</span><br><span class="line">墙内墙墙墙内墙</span><br><span class="line">墙内墙墙墙内墙</span><br><span class="line">墙内墙墙墙内墙</span><br><span class="line">墙内内内内内墙</span><br><span class="line">外墙墙墙墙墙外</span><br></pre></td></tr></table></figure><h2 id="试题-I-红绿灯"><a href="#试题-I-红绿灯" class="headerlink" title="试题 I: 红绿灯"></a>试题 I: 红绿灯</h2><h3 id="【问题描述】-8"><a href="#【问题描述】-8" class="headerlink" title="【问题描述】"></a>【问题描述】</h3><ul><li>爱丽丝要开车去上班，上班的路上有许多红绿灯，这让爱丽丝很难过。为了上班不迟到，她给自己的车安装了氮气喷射装置。现在她想知道自己上班最短需要多少时间。</li><li>爱丽丝的车最高速度是 1<br>V 米每秒，并且经过改装后，可以瞬间加速到小于等于最高速的任意速度，也可以瞬间停止。</li><li>爱丽丝家离公司有 N 米远，路上有 M 个红绿灯，第 i 个红绿灯位于离爱丽丝家 Ai 米远的位置，绿灯持续 Bi 秒，红灯持续 Ci 秒。在初始时（爱丽丝开始计时的瞬间），所有红绿灯都恰好从红灯变为绿灯。如果爱丽丝在绿灯变红的瞬间到达红绿灯，她会停下车等红灯，因为她是遵纪守法的好市民。</li><li>氮气喷射装置可以让爱丽丝的车瞬间加速到超光速（且不受相对论效应的影响！），达到瞬移的效果，但是爱丽丝是遵纪守法的好市民，在每个红绿灯前她都会停下氮气喷射，即使是绿灯，因为红绿灯处有斑马线，而使用氮气喷射装置通过斑马线是违法的。此外，氮气喷射装置不能连续启动，需要一定时间的冷却，表现为通过 K 个红绿灯后才能再次使用。（也就是说，如果 K &#x3D; 1，就能一直使用啦！）初始时，氮气喷射装置处于可用状态。</li></ul><h3 id="【输入格式】-6"><a href="#【输入格式】-6" class="headerlink" title="【输入格式】"></a>【输入格式】</h3><ul><li>第一行四个正整数 N、M、K、V，含义如题面所述。</li><li>接下来 M 行，每行三个正整数 Ai、Bi、Ci，含义如题面所述。</li></ul><h3 id="【输出格式】-6"><a href="#【输出格式】-6" class="headerlink" title="【输出格式】"></a>【输出格式】</h3><ul><li>输出一个正整数 T，表示爱丽丝到达公司最短需要多少秒。</li></ul><h3 id="【样例输入】-6"><a href="#【样例输入】-6" class="headerlink" title="【样例输入】"></a>【样例输入】</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">90 2 2 2</span><br><span class="line">30 20 20</span><br><span class="line">60 20 20</span><br></pre></td></tr></table></figure><h3 id="【样例输出】-6"><a href="#【样例输出】-6" class="headerlink" title="【样例输出】"></a>【样例输出】</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">80</span><br></pre></td></tr></table></figure><h3 id="【样例说明】-2"><a href="#【样例说明】-2" class="headerlink" title="【样例说明】"></a>【样例说明】</h3><ul><li>爱丽丝在最开始直接使用氮气喷射装置瞬间到达第一个红绿灯，然后绿灯通过，以最高速行进 60 秒后到达第二个红绿灯，此时绿灯刚好变红，于是她等待 20 秒再次变为绿灯后通过该红绿灯，此时氮气喷射装置冷却完毕，爱丽丝再次使用瞬间到达公司，总共用时 80 秒。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/post/5c2fafc7.html"/>
      <url>/post/5c2fafc7.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode热题</title>
      <link href="/post/6096f3d5.html"/>
      <url>/post/6096f3d5.html</url>
      
        <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><h3 id="最长公共前缀"><a href="#最长公共前缀" class="headerlink" title="最长公共前缀"></a>最长公共前缀</h3><ul><li>编写一个函数来查找字符串数组中的最长公共前缀。如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code>。</li></ul><h3 id="给出示例"><a href="#给出示例" class="headerlink" title="给出示例"></a>给出示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：strs = [<span class="string">&quot;flower&quot;</span>,<span class="string">&quot;flow&quot;</span>,<span class="string">&quot;flight&quot;</span>]</span><br><span class="line">输出：<span class="string">&quot;fl&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：strs = [<span class="string">&quot;dog&quot;</span>,<span class="string">&quot;racecar&quot;</span>,<span class="string">&quot;car&quot;</span>]</span><br><span class="line">输出：<span class="string">&quot;&quot;</span></span><br><span class="line">解释：输入不存在公共前缀。</span><br></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>标签：链表</li><li>当字符串数组长度为 0 时则公共前缀为空，直接返回；</li><li>令最长公共前缀 ans 的值为第一个字符串，进行初始化；</li><li>遍历后面的字符串，依次将其与 ans 进行比较，两两找出公共前缀，最终结果即为最长公共前缀；</li><li>如果查找过程中出现了 ans 为空的情况，则公共前缀不存在直接返回；</li><li>时间复杂度：O(s)O(s)，s 为所有字符串的长度之和。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">longestCommonPrefix</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(strs.length == <span class="number">0</span>) </span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">ans</span> <span class="operator">=</span> strs[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">1</span>;i&lt;strs.length;i++) &#123;</span><br><span class="line">            <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(;j&lt;ans.length() &amp;&amp; j &lt; strs[i].length();j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(ans.charAt(j) != strs[i].charAt(j))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = ans.substring(<span class="number">0</span>, j);</span><br><span class="line">            <span class="keyword">if</span>(ans.equals(<span class="string">&quot;&quot;</span>))</span><br><span class="line">                <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
